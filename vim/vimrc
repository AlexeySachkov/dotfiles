set nocompatible " be iMproved, required
filetype off " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" nice color scheme
Plugin 'AlexeySachkov/wombat256.vim'

" status bar
Plugin 'itchyny/lightline.vim'

" Git integrations
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
" TODO: cohama/agit.vim

" TODO: inkarkat/vim-mark

" FZF
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

" vim-notes
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'
" TODO: SidOfc/mkdx

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" At least let yourself know what mode you're in
set showmode

" Colors, syntax highlighting, etc
syntax on

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif
colorscheme wombat256mod

" FIXME: cursorline doesn't work in the area which colored by colorcolumn
let &colorcolumn=join(range(81,999),",")

" Let's use space as leader
let mapleader=" "

nnoremap <leader>q :q<CR>
nnoremap <leader>qa :qall<CR>
nnoremap <leader>wq :wq<CR>
nnoremap <leader>w :w<CR>

" More productive scrolling
set scrolljump=7
set scrolloff=7

" Some basic settings
set expandtab
set smarttab
set smartindent
set softtabstop=2
set shiftwidth=2
set tabstop=4

set ruler
set number
set cursorline
set wrap

set splitbelow
set splitright

set hlsearch
set incsearch
set ignorecase
set smartcase

" Be able to delete whitespaces and empty lines using 'backspace' key
set backspace=indent,eol,start

" Don't continue comments when pushing o/O
" FIXME: Looks like it doesn't work
set formatoptions-=o

" mark trailing spaces and tabs
set list
set listchars=tab:»~,trail:·

" Strip trailing spaces in a whole file
nnoremap <silent> <F9> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Switching between tabs
if has('terminal')
  " Easy way to start scroling within terminal
  tnoremap <C-U> <C-W>N<C-U>
endif

" associate *.cl with c filetype
augroup filetypedetect
  au BufRead,BufNewFile *.cl set filetype=c
augroup END

" clang-format integration
noremap <leader>r :py3f ~/clang-format-py3.py<CR>

" Plugins configuration

" let's use FZF and buffers
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>ag :Ag<CR>

" TODO: look at other note plugins, maybe there are something better?
" vim-notes plugin settings
let g:notes_suffix = '.md'
let g:notes_directories = ['~/vim-notes']

" My vim configuration is split into several files:
"
" toggles.vim - contains toggle keybindings and all corresponding code.
" Examples: paste mode, guest mode
"
" lightline.vim - constains configuration for lightline plugin
"
" experiments.vim - special file with dummy or temporary stuff that need to be
" tested/evaluated/developed first

let s:vimrc_dir = expand('<sfile>:p:h')
let s:vimrc_additional_configs = [
\ 'toggles.vim',
\ 'lightline.vim',
\ 'experiments.vim'
\ ]

for config_file in s:vimrc_additional_configs
  let config_file_path = s:vimrc_dir . '/.dotfiles/vim/' . config_file
  if filereadable(config_file_path)
    execute('source ' . config_file_path)
  endif
endfor
